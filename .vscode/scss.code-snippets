{
  // Place your eagle-web 工作區 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  //   "scope": "javascript,typescript",
  //   "prefix": "log",
  //   "body": [
  //     "console.log('$1');",
  //     "$2"
  //   ],
  //   "description": "Log output to console"
  // }

  "rwd": {
		"prefix": "rwd",
		"body": [
			"@include rwd-mobile {",
			"  $1",
			"}",
			"@include rwd-pc {",
			"  $2",
			"}",
      "@include rwd-pc-big {",
			"  $3",
			"}",
		],
		"description": "RWD"
	},
  "component 元件動態注入": {
    "prefix": "com",
    "body": [
      "const $2 = defineAsyncComponent(() => import('$1'));"
    ]
  },
  "rwds": {
    "prefix": "rwds",
		"body": [
	    ".pc-show {",
      "  @include rwd-mobile {",
      "    display: none;",
      "  }",
      "}",
      ".mobile-show {",
      "  @include rwd-pc {",
      "    display: none;",
      "  }",
      "}",
		],
		"description": "RWD Show"
  },
  "dd": {
    "prefix": "dd",
    "body": [
       "// eslint-disable-line"
    ]
  },
  "ll": {
    "prefix": "ll",
    "body": [
      "console.log($1);",
    ]
  },
 
  "vue 檔模板": {
    "prefix": "tt",
    "body": [
      "<script setup lang=\"ts\">",
      "// $1 請填寫功能描述👈",
      "</script>",
      "",
      "<template lang=\"pug\">",
      "#$1",
      "  p $1",
      "</template>",
      "",
      "<style lang=\"scss\" scoped>",
      "// 佈局 ----",
      "#$1 {",
      "  // TODO",
      "}",
      "",
      "// 組件 ----",
      "</style>",
      ""
    ]
  },
  "scss 檔模板": {
    "prefix": "scss",
    "body": [
      "<style lang=\"scss\" scoped>",
      "// 佈局 ----",
      "#$1 {",
      "  // TODO",
      "}",
      "",
      "// 組件 ----",
      "</style>",
      ""
    ]
  },
  "mark line": {
    "prefix": "// -",
    "body": [
      "// $1-----------------------------------------------------------------------------------------------",
    ]
  },
  "methods 分類": {
		"prefix": "mClassify",
		"body": [
      "// 資料 --------------------------------------------------------------------------------------------",
			"// const props = defineProps({}); definePageMeta({})",
			"",
			"// 接收事件 -----------------------------------------------------------------------------------------",
			"",
			"// 流程 --------------------------------------------------------------------------------------------",
			"",
			"// 函式 --------------------------------------------------------------------------------------------",
			"",
      "// Api ---------------------------------------------------------------------------------------------",
			"",
      "// 生命週期 -----------------------------------------------------------------------------------------",
			"// onMounted(()=>{}); useAsnycData",
			"",
      "// 對外事件 -----------------------------------------------------------------------------------------", 
			"// const emit = defineEmits(['update:modelValue','on-change']);",
			"",
			"// Ref 輸出 ----------------------------------------------------------------------------------------",
			"// defineExpose({ ... })",
		]
	},
  "apibase": {
    "prefix": "api",
    "body": [
      "/**  說明 API */",
      "const Api$1 = async (): Promise<boolean> => {",
      "  const res = await api.$1();",
      "  if (res.status.is_success) {",
      "    return true;",
      "  }",
      "  if (res.status.message) ElMessage({ message: res.status.message, type: 'error' });",
      "  return false;",
      "};",
    ]
  },
  "useAsnycData": {
    "prefix": "useAsyncData",
		"body": [
			"useAsyncData('init', async () => {",
      "  $1",
      "  await Promise.all([fn1(), fn2()]);",
      "  return true;",
      "});"
		]
  },
  "debounce 基礎": {
		"prefix": "debounce",
		"body": [
			"lodash.debounce(() => {",
			"  // ",
			"}, 400, { leading: true, trailing: false });"
		]
	},
  "ts 單行關閉檢測": {
    "prefix": "ts-ignore",
    "body": [
      "// @ts-ignore"
    ]
  },
}
